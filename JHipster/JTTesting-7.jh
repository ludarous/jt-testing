entity Event {
	name String required,
    date ZonedDateTime
}


entity ActivityGroup {
	name String required,
    description String
}

entity Activity {
   	name String required,
    description String,
    help String,
    key String,
    primaryResultValueUnit ActivityResultUnits required,
    secondaryResultValueUnit ActivityResultUnits, 
    minAge Integer,
    maxAge Integer
}

entity TestCategory {
	name String required,
    key String,
    description String
}

entity ActivityCategory {
	name String required,
    key String,
    description String
}

entity EventResult {
	note String,
    actualHeightInCm Float,
    actualWeightInKg Float
}

entity ActivityGroupResult {
    note String
}

entity ActivityResult {
	primaryResultValue Float required,
    secondaryResultValue Float,
    note String
}

entity Person {
	
}

entity PersonalData {
	firstName String required,
    lastName String required,
    birthDate ZonedDateTime required,
    nationality String
}

entity Address {
	country String required,
    city String required,
	street String required,
    zipCode String required
}

entity Sport {
	name String required
}

enum ActivityResultUnits {
	SECONDS, MINUTES, CENTIMETERS, METERS, COUNTS, GOALS, POINTS, PERCENTS
}

relationship OneToOne {
	Person{personalData} to PersonalData
    Person{address} to Address
}

relationship ManyToMany {
	ActivityGroup{activities(name)} to Activity
    Activity{categories(name)} to ActivityCategory
    ActivityGroup{categories(name)} to TestCategory
    ActivityGroup{sports(name)} to Sport
    Event{tests(name)} to ActivityGroup
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	ActivityGroupResult{activitiesResults} to ActivityResult
    Event{eventResults} to EventResult
    EventResult{activityGroupResults} to ActivityGroupResult
}

relationship ManyToOne {
	EventResult{person required} to Person
    ActivityGroupResult{test(name) required} to ActivityGroup
    ActivityResult{activity(name) required} to Activity
    Event{address(street)} to Address
}

// Set pagination options
paginate * with pagination

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
search * with elasticsearch
